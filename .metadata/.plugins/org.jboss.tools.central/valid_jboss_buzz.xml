<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Infinispan 12.0.1.Final “Lockdown”</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/__7eKygf9Nc/infinispan-12-0-1" /><author><name>Ryan Emerson</name></author><id>/blog/2021/02/12/infinispan-12-0-1</id><updated>2021-02-12T12:00:00Z</updated><content type="html">Dear Infinispan community, we hope you’ve been enjoying all the new goodies included in our latest major release, Infinispan 12. We now have a brand new micro release for you which addresses a number of issues. The following list shows what we have fixed: COMPONENT UPGRADE * - Upgrade console to 0.13.1.Final ENHANCEMENT * - Implement proper form login and digest login * - Implicit connectors for the single-port endpoint * - Add addtional DEBUG logs to Backup/Restore operations FEATURE REQUEST * - Add property to disable test execution BUG * - Replicated cache get ignores value in zero-capacity nodes * - CacheEntryCloudEventsTest test failures * - Get entry broken in protobuf caches * - Fix IracWriteSkewTest test * - StatsTest random failures * - Licenses are not properly generated in console * - Functional commands break in replicated caches on zero-capacity nodes * - LocalIndexSyncStateTransferTest random failures * - ReplicationIndexTest random failures * - GlobalState incompatibility between 11.x and 12.x * - Tests failing due to relying on published images * - CLI Batch files returns exit code 0 on error * - Cannot retrieve the keyset of a cache (ISPN000287) * - IllegalArgumentException in VoidResponseCollector: Self-suppression not permitted * - Hot Rod iteration shouldn’t require ADMIN permission * - When a value is json but not protobuf the console fails * - Hot Rod client has too many Elytron dependencies TASK * - Upgrade logo in Operator Hub&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/__7eKygf9Nc" height="1" width="1" alt=""/&gt;</content><dc:creator>Ryan Emerson</dc:creator><feedburner:origLink>http://tools.jboss.org/blog/2021/02/12/infinispan-12-0-1</feedburner:origLink></entry><entry><title>Developing your own custom devfiles for odo 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/p2RepYy6GgU/" /><category term="Containers" /><category term="Developer Tools" /><category term="Event-Driven" /><category term="Java" /><category term="Kubernetes" /><category term="custom devfile" /><category term="devfiles" /><category term="odo" /><category term="openshift" /><category term="poststart" /><author><name>Gorkem Ercan</name></author><id>https://developers.redhat.com/blog/?p=836997</id><updated>2021-02-12T08:00:17Z</updated><published>2021-02-12T08:00:17Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/odo/overview"&gt;Odo 2.0&lt;/a&gt; introduces a configuration file named &lt;code&gt;devfile.yaml&lt;/code&gt;. Odo uses this configuration file to set up cloud-native projects and determine the actions required for events such as building, running, and debugging a project. If you are an &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; user, &lt;code&gt;devfile.yaml&lt;/code&gt; should sound familiar: Eclipse Che uses devfiles to express developer workspaces, and they have proven to be flexible to accommodate a variety of needs.&lt;/p&gt; &lt;p&gt;Odo 2.0 comes with a built-in catalog of devfiles for various project types, so you do not necessarily need to write or modify a devfile to start a new project. You can also create custom devfiles and contribute them to odo&amp;#8217;s devfile catalog. This article explores how to create a devfile to adopt an existing development flow to run on a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; cluster. Our example project is based on &lt;a target="_blank" rel="nofollow" href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;, a framework for generating websites. Gatsby comes with its own developer tools and recommended development flow, so it presents a good example for adopting existing flows for Kubernetes.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt;&lt;/em&gt; for more about devfiles and other new features in this latest release.&lt;/p&gt; &lt;h2&gt;Anatomy of a devfile&lt;/h2&gt; &lt;p&gt;Before we begin working with the example, let’s take a quick look at the anatomy of a devfile.&lt;/p&gt; &lt;p&gt;Other than the &lt;code&gt;schemaVersion&lt;/code&gt;, no other properties are mandatory on a devfile. This flexibility lets developers use devfiles for multiple purposes. A devfile can be generic for a technology base or specific to a project, and projects can inherit and override parts of other devfiles.&lt;/p&gt; &lt;p&gt;Components, commands, and events are the most commonly used devfile properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Components&lt;/b&gt; describe the parts of the development environment that need to be created. Examples include runtime containers and Kubernetes resources.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Commands&lt;/b&gt; describe the predefined commands to be used to achieve specific development goals with the provided tools.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Events&lt;/b&gt; bind commands to the lifecycle of the developer environment. Currently, there are four events: &lt;code&gt;postStart&lt;/code&gt;, &lt;code&gt;postStop&lt;/code&gt;, &lt;code&gt;preStart&lt;/code&gt;, and &lt;code&gt;preStop&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Implement a devfile&lt;/h2&gt; &lt;p&gt;You&amp;#8217;ve had a quick introduction to devfiles and their three most commonly used properties. Now, let&amp;#8217;s apply what you&amp;#8217;ve learned. For this example, we will project instructions from the &lt;a target="_blank" rel="nofollow" href="https://www.gatsbyjs.com/docs/"&gt;Gatsby documentation&lt;/a&gt; into a devfile, which we&amp;#8217;ll use to develop a website on Kubernetes.&lt;/p&gt; &lt;h3&gt;Select a base image&lt;/h3&gt; &lt;p&gt;Because the application runs as a container, we&amp;#8217;ll start by selecting a base image and defining it as a component:&lt;/p&gt; &lt;pre&gt;schemaVersion: 2.0.0 components:   - name: gatsby container:    image: quay.io/eclipse/che-nodejs10-ubi:nightly    mountSources: true    memoryLimit: 700Mi    endpoints:      - name: web        targetPort: 8000 &lt;/pre&gt; &lt;p&gt;It’s worth mentioning the container&amp;#8217;s &lt;code&gt;mountSources&lt;/code&gt; property. Odo uses this value as a hint for synchronizing your local files to the container running on your Kubernetes cluster.&lt;/p&gt; &lt;h3&gt;Define the commands&lt;/h3&gt; &lt;p&gt;Next, let’s define the commands that we&amp;#8217;ll use to build and run the application. The two commands that we need to define will run on the application&amp;#8217;s &lt;code&gt;gatsby&lt;/code&gt; component. The &lt;code&gt;gatsby-develop&lt;/code&gt; command starts the application in development mode. The &lt;code&gt;setup-gatsby-cli&lt;/code&gt; command sets up Gatsby&amp;#8217;s development tools on the &lt;code&gt;gatsby&lt;/code&gt; component:&lt;/p&gt; &lt;pre&gt;commands:   - id: gatsby-develop exec:    commandLine: "gatsby develop -H 0.0.0.0"    component: gatsby    group:      kind: run    attributes:      restart: "false"   - id: setup-gatsby-cli exec:    commandLine: "npm install -g gatsby-cli &amp;#38;&amp;#38; npm install"    component: gatsby &lt;/pre&gt; &lt;h3&gt;Define the events&lt;/h3&gt; &lt;p&gt;Finally, we define a &lt;code&gt;postStart&lt;/code&gt; event to optimize the setup once a component has started:&lt;/p&gt; &lt;pre&gt;events:   postStart: - setup-gatsby-cli &lt;/pre&gt; &lt;h2&gt;Create and push the example application&lt;/h2&gt; &lt;p&gt;Assuming you have odo and the Gatsby CLI installed locally, you can put your newly acquired devfile to work. Here are the commands to create and push a simple Gatsby site using odo:&lt;/p&gt; &lt;pre&gt;gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world cd hello-world ## create or copy devfile.yaml ## from https://gist.github.com/gorkem/78fd17864218a125b2bd9146728a1af8 odo push &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;While odo comes with a built-in catalog of devfiles, you can also develop your own. Creating custom devfiles lets you integrate the technologies that you work with into the Kubernetes environment. Once you&amp;#8217;ve created a devfile, you can contribute it to the devfile catalog for wider community reach.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#38;linkname=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F12%2Fdeveloping-your-own-custom-devfiles-for-odo-2-0%2F&amp;#038;title=Developing%20your%20own%20custom%20devfiles%20for%20odo%202.0" data-a2a-url="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/" data-a2a-title="Developing your own custom devfiles for odo 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/"&gt;Developing your own custom devfiles for odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/p2RepYy6GgU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Odo 2.0 introduces a configuration file named devfile.yaml. Odo uses this configuration file to set up cloud-native projects and determine the actions required for events such as building, running, and debugging a project. If you are an Eclipse Che user, devfile.yaml should sound familiar: Eclipse Che uses devfiles to express developer workspaces, and they have [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/"&gt;Developing your own custom devfiles for odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">836997</post-id><dc:creator>Gorkem Ercan</dc:creator><dc:date>2021-02-12T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/12/developing-your-own-custom-devfiles-for-odo-2-0/</feedburner:origLink></entry><entry><title>Enhancing the development loop with Quarkus remote development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0TQLwfOsFhs/" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="live coding" /><category term="mutable application" /><category term="openshift" /><category term="remote development" /><author><name>Daniel Oh</name></author><id>https://developers.redhat.com/blog/?p=859517</id><updated>2021-02-11T08:00:36Z</updated><published>2021-02-11T08:00:36Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; is an established foundation layer for &lt;a href="https://developers.redhat.com/topics/microservices"&gt;cloud-native microservices&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless architectures&lt;/a&gt;. By automating application deployment, scaling, and management, Kubernetes changes the &lt;a href="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/"&gt;developer&amp;#8217;s daily workflow&lt;/a&gt; in terms of inner loop development (local coding, building, running, and testing the application) and outer loop development (integration testing, continuous deployment, and security). Developers using Kubernetes also must plan for containerization, debugging code inside pods, and automating test cases.&lt;/p&gt; &lt;p&gt;In this article, you&amp;#8217;ll see how using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; remote development enhances the development loop on Kubernetes. We will set up a new Quarkus project then configure it for live coding on a remote &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; cluster, just like you would in your local development environment.&lt;/p&gt; &lt;h2&gt;Step 1: Create a new Quarkus project&lt;/h2&gt; &lt;p&gt;We’ll use a Maven plug-in to scaffold a new project with the following command:&lt;/p&gt; &lt;pre&gt;$ mvn io.quarkus:quarkus-maven-plugin:1.11.1.Final:create \    -DprojectGroupId=org.acme \    -DprojectArtifactId=quarkus-remote \    -DprojectVersion=1.0.0-SNAPSHOT \    -DclassName="org.acme.GreeterResource" \     -Dextensions="openshift"&lt;/pre&gt; &lt;p&gt;This command generates a &lt;code&gt;quarkus-remote&lt;/code&gt; directory that includes a new Quarkus project. When you open the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;, you will see a simple RESTful API:&lt;/p&gt; &lt;pre&gt;@Path("/hello") public class GreeterResource {   @GET   @Produces(MediaType.TEXT_PLAIN)   public String hello() {       return "Hello RESTEasy";   } }&lt;/pre&gt; &lt;h2&gt;Step 2: Live coding in your local environment&lt;/h2&gt; &lt;p&gt;Quarkus comes with a built-in development mode for hot deployment with background compilation. After changing the code, resources, or configuration in a running application, you only need to refresh your web browser or invoke the project&amp;#8217;s RESTful API for the changes to take effect automatically. To run your application locally, execute the following command in the project&amp;#8217;s home directory:&lt;/p&gt; &lt;pre&gt;$ mvn quarkus:dev&lt;/pre&gt; &lt;p&gt;You will see that live coding has been activated:&lt;/p&gt; &lt;pre&gt;INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.&lt;/pre&gt; &lt;p&gt;Invoke the application&amp;#8217;s RESTful API endpoint with a&lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ curl http:/localhost:8080/hello&lt;/pre&gt; &lt;p&gt;The output should be:&lt;/p&gt; &lt;pre&gt;Hello RESTEasy&lt;/pre&gt; &lt;p&gt;Return to the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;. Change the code in the &lt;code&gt;hello()&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;return "Hello RESTEasy from Local";&lt;/pre&gt; &lt;p&gt;Save the file, then use the same &lt;code&gt;curl&lt;/code&gt; command to re-invoke the endpoint. The new output should be:&lt;/p&gt; &lt;pre&gt;Hello RESTEasy from Local&lt;/pre&gt; &lt;p&gt;Invoking the RESTful API triggers a scan of the workspace. If any changes are detected, the Java files are compiled, and the application is redeployed, and the redeployed application services your request. If you check the logs in your running Quarkus runtime, you should see the detected source files:&lt;/p&gt; &lt;pre&gt;INFO  [io.qua.dep.dev.RuntimeUpdatesProcessor] (vert.x-worker-thread-4) Changed source files detected, recompiling [/Users/danieloh/Downloads/quarkus-remote/src/main/java/me/daniel/GreeterResource.java] &lt;/pre&gt; &lt;p&gt;Hit &lt;b&gt;CTRL+C&lt;/b&gt; when you are ready to stop the application.&lt;/p&gt; &lt;h2&gt;Step 3: Build and deploy a mutable application&lt;/h2&gt; &lt;p&gt;What if you want to expand the inner loop development cycle to a remote container environment such as Kubernetes or OpenShift? You can configure your application in remote development mode to make changes to your local files immediately visible in your remote container environment.&lt;/p&gt; &lt;p&gt;To develop remotely, you need to build a mutable application using the &lt;code&gt;mutable-jar&lt;/code&gt; format. You can then use the OpenShift extension and Maven plug-in to deploy the application to your remote OpenShift cluster. Append the following configurations to your Quarkus project&amp;#8217;s &lt;code&gt;application.properties&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;# Mutable Jar configurations quarkus.package.type=mutable-jar quarkus.live-reload.password=changeit # OpenShift Extension Configurations quarkus.container-image.build=true quarkus.kubernetes-client.trust-certs=true quarkus.kubernetes.deployment-target=openshift quarkus.openshift.expose=true quarkus.openshift.env-vars.quarkus-launch-devmode.value=true&lt;/pre&gt; &lt;p&gt;Note that you can change the password to whatever you want. It is used to secure communication between the remote side and the local side.&lt;/p&gt; &lt;h3&gt;Open the mutable application in your OpenShift cluster&lt;/h3&gt; &lt;p&gt;To log in to the OpenShift cluster, you have to install the &lt;code&gt;oc&lt;/code&gt; command-line interface and use the &lt;code&gt;oc&lt;/code&gt; login. &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/cli_reference/openshift_cli/getting-started-cli.html#cli-getting-started"&gt;Installation options for the CLI&lt;/a&gt; will vary depending on your operating system.&lt;/p&gt; &lt;p&gt;Assuming you have &lt;code&gt;oc&lt;/code&gt; installed, execute the following command in your Quarkus project home directory:&lt;/p&gt; &lt;pre&gt;$ oc new-project quarkus-remote $ mvn clean package -DskipTests -Dquarkus.kubernetes.deploy=true&lt;/pre&gt; &lt;p&gt;This command creates a new project in the remote OpenShift cluster. The mutable JAR will be packaged and deployed to OpenShift. The output should end with &lt;code&gt;BUILD SUCCESS&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Check the application in the OpenShift console&lt;/h3&gt; &lt;p&gt;So far, so good. Now, let’s go to the Developer console in the OpenShift cluster and then navigate the Topology view. You will see that your Quarkus application has been deployed. Click on &lt;b&gt;View logs&lt;/b&gt; to see how the mutable application is deployed, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_859527" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859527" class=" size-large wp-image-859527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png" alt="Figure 1. Topology View" width="640" height="335" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-1024x536.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.44-AM-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859527" class="wp-caption-text"&gt;Figure 1: The new, mutable application in the Topology view.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see the output &amp;#8220;&lt;code&gt;Profile dev activated. Live Coding activated&lt;/code&gt;&amp;#8221; in the pod logs, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_859537" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859537" class=" size-large wp-image-859537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png" alt="Figure 2. Pod Logs" width="640" height="258" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-1024x413.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-300x121.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.45.55-AM-768x310.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859537" class="wp-caption-text"&gt;Figure 2: The pod logs show that live coding has been activated.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Check the application&amp;#8217;s RESTful API&lt;/h3&gt; &lt;p&gt;Go back to the Topology view to access the application&amp;#8217;s RESTful API. Click the &lt;b&gt;Open URL&lt;/b&gt; icon highlighted in Figure 3.&lt;/p&gt; &lt;div id="attachment_859547" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859547" class=" size-large wp-image-859547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png" alt="Figure 3. Open URL" width="640" height="296" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-1024x473.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.03-AM-768x355.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859547" class="wp-caption-text"&gt;Figure 3: Open the RESTful API URL.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Append &lt;code&gt;/hello&lt;/code&gt; at the application’s route URL. When you check it, you should see the same output in your local environment :&lt;/p&gt; &lt;div id="attachment_859557" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859557" class=" size-large wp-image-859557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png" alt="Figure 4. Access the REST API" width="640" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-1024x221.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.14-AM-768x166.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859557" class="wp-caption-text"&gt;Figure 4: Access the RESTful API.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Run the application in remote development mode&lt;/h2&gt; &lt;p&gt;The last step is to connect your local agent to the remote host on OpenShift. To start, append the &lt;code&gt;quarkus.live-reload.url&lt;/code&gt; configuration to your &lt;code&gt;application.properties&lt;/code&gt; file. Note that you will need to remove or comment the OpenShift extension configurations so that they will not trigger the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/builds/understanding-image-builds.html#builds-strategy-s2i-build_understanding-image-builds"&gt;source-to-image build&lt;/a&gt; when you change the code:&lt;/p&gt; &lt;pre&gt;# Mutable Jar configurations quarkus.package.type=mutable-jar quarkus.live-reload.password=changeit quarkus.live-reload.url=http://YOUR_APP_ROUTE_URL # OpenShift Extension Configurations # quarkus.container-image.build=true # quarkus.kubernetes-client.trust-certs=true # quarkus.kubernetes.deployment-target=openshift # quarkus.openshift.expose=true # quarkus.openshift.env-vars.quarkus-launch-devmode.value=true&lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;remote-dev&lt;/code&gt; command to execute the remote development mode:&lt;/p&gt; &lt;pre&gt;$ mvn quarkus:remote-dev&lt;/pre&gt; &lt;p&gt;The output should end with &lt;code&gt;Connected to remote server&lt;/code&gt;. Now you can develop in the same environment where you will run your app, with access to the same services.&lt;/p&gt; &lt;p&gt;Next, return to the &lt;code&gt;GreeterResource.java&lt;/code&gt; class file in &lt;code&gt;src/main/java/org/acme&lt;/code&gt;, then change the code in the &lt;code&gt;hello()&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;return "Hello RESTEasy from &lt;b&gt;OpenShift&lt;/b&gt;";&lt;/pre&gt; &lt;p&gt;Save the file, then refresh the browser. The output should be what you see in Figure 5.&lt;/p&gt; &lt;div id="attachment_859567" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-859567" class=" size-large wp-image-859567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png" alt="Figure 5. Reinvoke the RESTful API" width="640" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-1024x221.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/Screen-Shot-2021-01-20-at-10.46.18-AM-768x166.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-859567" class="wp-caption-text"&gt;Figure 5: Re-invoke the RESTful API.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Every time you refresh the browser, you should see that local changes are immediately visible in the remote application. An HTTP-based long polling transport synchronizes your local workspace and the remote application via HTTP calls. Here&amp;#8217;s an example of log output in the local Quarkus runtime:&lt;/p&gt; &lt;pre&gt;INFO  [io.qua.dep.dev.RuntimeUpdatesProcessor] (Remote dev client thread) Changed source files detected, recompiling [/Users/danieloh/Downloads/quarkus-remote/src/main/java/me/daniel/GreeterResource.java] ... INFO  [io.qua.ver.htt.dep.dev.HttpRemoteDevClient] (Remote dev client thread) Sending dev/app/me/daniel/GreeterResource.class INFO  [io.qua.ver.htt.dep.dev.HttpRemoteDevClient] (Remote dev client thread) Sending quarkus-run.jar ...&lt;/pre&gt; &lt;p&gt;Awesome! You should be all set to enjoy your inner loop development experience while implementing your application&amp;#8217;s new business requirements.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Using Quarkus&amp;#8217;s remote development mode in production could cause unexpected functional changes to the running application. Remote development should only be used when the application is in development.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You can use Quarkus to enhance the development loop by connecting the live coding features from your local machine to a remote container environment such as OpenShift. Being able to do remote development in a cloud-native Java runtime simplifies the development workflow—from writing code to building, running, debugging, and deploying microservices at speed. See the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/"&gt;Quarkus Guides&lt;/a&gt; for more about how Quarkus optimizes development productivity through unified configuration, zero-config with live coding, and easy injection of extensions for implementing cloud-native applications.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#38;linkname=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F11%2Fenhancing-the-development-loop-with-quarkus-remote-development%2F&amp;#038;title=Enhancing%20the%20development%20loop%20with%20Quarkus%20remote%20development" data-a2a-url="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/" data-a2a-title="Enhancing the development loop with Quarkus remote development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0TQLwfOsFhs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Kubernetes is an established foundation layer for cloud-native microservices and serverless architectures. By automating application deployment, scaling, and management, Kubernetes changes the developer&amp;#8217;s daily workflow in terms of inner loop development (local coding, building, running, and testing the application) and outer loop development (integration testing, continuous deployment, and security). Developers using Kubernetes also must plan [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">859517</post-id><dc:creator>Daniel Oh</dc:creator><dc:date>2021-02-11T08:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/</feedburner:origLink></entry><entry><title type="html">WildFly 22.0.1 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RbBDg97Wwwc/" /><author><name>James R. Perkins</name></author><id>https://wildfly.org//news/2021/02/11/WildFly2201-Released/</id><updated>2021-02-11T00:00:00Z</updated><content type="html">WildFly 22.0.1.Final is now available . It’s been about a month since the WildFly 22 release, so we’ve done a small bug fix update, WildFly 22.0.1. The full list of issues resolved in WildFly 22.0.1 is available . Issues resolved in the WildFly Core update included with WildFly 22.0.1 are available . Enjoy!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RbBDg97Wwwc" height="1" width="1" alt=""/&gt;</content><dc:creator>James R. Perkins</dc:creator><feedburner:origLink>https://wildfly.org//news/2021/02/11/WildFly2201-Released/</feedburner:origLink></entry><entry><title type="html">Improvements of Project Authoring in Business Central</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HfkgmLUcdwE/improvements-of-project-authoring-in-business-central.html" /><author><name>Abhishek Kumar</name></author><id>https://blog.kie.org/2021/02/improvements-of-project-authoring-in-business-central.html</id><updated>2021-02-10T09:12:24Z</updated><content type="html">We have introduced some very useful features in Business Central. Now there’s more customization for users to their needs in the authoring perspective. These features are implemented considering security and ease of use in business application development. Let’s have a look at these features in detail. OPENING PROJECTS DIRECTLY WITH URL In Business Central, we have the standalone perspective to open specific assets such as BPMN editor, Custom page editor, etc. Following the same approach now we have the ability to land on the project assets screen in a standalone view directly using the path, i.e. default://mybranch@myspace/myproject. You can enter the path param in the following URL format, CHANGE DEFAULT PAGE SIZE We can customize the number of assets per page on the project assets screen. Users can set the default page size in default preference under project preferences. The minimum value can be set as “1”. As this is the default project preference, it will affect all projects in Business Central. SECURITY PERMISSION FOR PROJECT SCREEN TOOLS/TABS You can provide permission-based access to some components on the project screen. Here is the list of components of which you can control visibility. * Project change request tab * Project metrics tab * Project toolbar In the assets screen with security permissions. Go to admin &gt; groups, select a group, and open the workbench dropdown from permissions. There you can see the options to customize the above-mentioned components. Many thanks to Paulo, Rishiraj, Tomas, and Eder for their efforts and support to deliver these features. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HfkgmLUcdwE" height="1" width="1" alt=""/&gt;</content><dc:creator>Abhishek Kumar</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/improvements-of-project-authoring-in-business-central.html</feedburner:origLink></entry><entry><title>Add standardized support information to your Node.js modules</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GKMeyeZuwcY/" /><category term="JavaScript" /><category term="Node.js" /><category term="Open source" /><category term="github actions" /><category term="Node modules" /><category term="nodeshift" /><category term="npm" /><category term="semantic versioning" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=853117</id><updated>2021-02-10T08:00:47Z</updated><published>2021-02-10T08:00:47Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://nodeshift.dev/"&gt;Nodeshift&lt;/a&gt; team recently improved the consistency of the projects we use to maintain our Node.js modules. We made sure that the same linter and tests—ESLint and Tape, for those interested—were used on all projects. We also added support information for the modules we publish to the &lt;a target="_blank" rel="nofollow" href="https://docs.npmjs.com/about-npm"&gt;npm registry&lt;/a&gt;. We looked to the &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md#format-and-structure"&gt;Node.js Package Maintenance Working Group&lt;/a&gt; for the standardized support information to add.&lt;/p&gt; &lt;p&gt;In this article, I detail the changes we made based on the Package Maintenance Working Group&amp;#8217;s recommended best practices. After reading the article, you&amp;#8217;ll be familiar with the recommended support information and the tools available for adding it to your Node.js modules. First, I will introduce the Node.js Package Maintenance Working Group and its purpose.&lt;/p&gt; &lt;h2&gt;The Node.js Package Maintenance Working Group&lt;/h2&gt; &lt;p&gt;The Node.js Package Maintenance Working Group was created to help package maintainers and consumers navigate the ever-growing Node.js module ecosystem. The working group has &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance#goals"&gt;a few specific goals&lt;/a&gt;. One of those goals is to help package maintainers communicate with and set expectations for their users. The working group recommends providing information such as the project&amp;#8217;s level of backing, the target level of support, and what versions of Node.js will eventually be supported for every Node.js module. Users can then select modules that are a good fit for their functional and business needs.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: For a more in-depth look at the Node.js Package Maintenance Working Group&amp;#8217;s recommendations, check out &lt;a target="_blank" rel="nofollow" href="https://openjsf.org/blog/2020/09/23/node-js-package-maintenance-bridging-the-gap-between-maintainers-and-consumers/"&gt;&lt;i&gt;Node.js package maintenance: Bridging the gap between maintainers and consumers&lt;/i&gt;&lt;/a&gt; on the OpenJSF project page.&lt;/p&gt; &lt;p&gt;The working group created an initial &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md"&gt;set of best practices&lt;/a&gt; that anyone who maintains and consumes packages can use when adding a support policy to their modules. The easiest way to add this standardized information to your Node.js modules is to create a separate file called &lt;code&gt;package-support.json&lt;/code&gt;, which lives at the root of the package. You can then add the support parameter to the &lt;code&gt;package.json&lt;/code&gt; with a value of &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Updating the Nodeshift modules&lt;/h2&gt; &lt;p&gt;More advanced options are available, but we decided to only add the &lt;code&gt;support: true&lt;/code&gt; parameter to our &lt;code&gt;package.json&lt;/code&gt; and store support information in a separate file, &lt;code&gt;package-support.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here are the contents of the &lt;code&gt;package-support.json&lt;/code&gt; for &lt;a target="_blank" rel="nofollow" href="https://github.com/nodeshift/opossum/blob/master/package-support.json"&gt;Opossum&lt;/a&gt;, one of our modules:&lt;/p&gt; &lt;pre&gt;{ "versions": [ { "version": "*", "target": { "node": "lts" }, "response": { "type": "regular-7" }, "backing": { "company": "true" } } ] } &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s unpack the fields here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;First, we have the top-level &lt;code&gt;versions&lt;/code&gt; property, which in our case is an array. This property contains information for a package version range. We have only one entry in our array.&lt;/li&gt; &lt;li&gt;The next field is &lt;code&gt;version&lt;/code&gt;, which specifies the module version or versions that are supported. This could be a &lt;a target="_blank" rel="nofollow" href="https://semver.org"&gt;semantic versioning&lt;/a&gt; (SemVer) range, but in our case, we use &lt;code&gt;*&lt;/code&gt;, signifying all versions.&lt;/li&gt; &lt;li&gt;Next, we have the &lt;code&gt;target&lt;/code&gt; property, which tells us the platform version we&amp;#8217;ll support. In our case, we are running on Node.js and plan to support currently active long-term support (LTS) versions. This means that as Node.js versions become LTS, we will support them. Similarly, as Node.js versions enter end-of-life (EOL), we will no longer support them.&lt;/li&gt; &lt;li&gt;We next specify that our &lt;code&gt;response&lt;/code&gt; is &lt;code&gt;regular-7&lt;/code&gt;, which means that dedicated folks maintain this package and users can expect a response within seven days or fewer.&lt;/li&gt; &lt;li&gt;Lastly, our &lt;code&gt;backing&lt;/code&gt; property is set to &lt;code&gt;company&lt;/code&gt;, because it is part of our day job to maintain these packages.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each of these fields has more advanced options, so please see the &amp;#8220;Format and Structure&amp;#8221; section of the &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md#format-and-structure"&gt;package maintenance team documents&lt;/a&gt; to learn more.&lt;/p&gt; &lt;h2&gt;Validating support information (@pkgjs/support)&lt;/h2&gt; &lt;p&gt;Now that we have added the support file to our module, we, as maintainers of the module, want to check that the information we added to the &lt;code&gt;package.json&lt;/code&gt; and the &lt;code&gt;package-support.json&lt;/code&gt; is valid.&lt;/p&gt; &lt;p&gt;For this, we can use a tool from the Node.js Package Maintenance Working Group called &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/@pkgjs/support"&gt;@pkgjs/support&lt;/a&gt;. To start, we &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/support"&gt;run the validate&lt;/a&gt; command from our module&amp;#8217;s root to make sure it is valid:&lt;/p&gt; &lt;pre&gt;npx @pkgjs/support validate &lt;/pre&gt; &lt;p&gt;Because we are using GitHub actions, we’ve put this command in our continuous integration (CI) pipeline to test that our support information is valid whenever the integration is run. We also package consumers, and our module has dependencies, so we add another important command called &lt;code&gt;show&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;npx @pkgjs/support show &lt;/pre&gt; &lt;p&gt;This command allows us to view and understand the support information that other maintainers might provide. Right now, the command&amp;#8217;s implementation is very basic, but we expect it to evolve and grow over time, much like the tools that use the license information provided in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you&amp;#8217;ve seen, adding support information for a Node.js module can be very simple and beneficial to the module&amp;#8217;s users and the Node.js module ecosystem as a whole. We hope you join us in adding the recommended support information to your modules. We believe it’s a good way for a maintainer to help set expectations. As Node.js use becomes more widespread, support information will be important to ensure a good match between users&amp;#8217; expectations and the modules they use.&lt;/p&gt; &lt;p&gt;While this article only covers the basic commands, more advanced options are available. To learn more about the &lt;code&gt;@pkgjs/support&lt;/code&gt; tool or the Node.js Package Maintenance Working Group, see the project&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/support"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#38;linkname=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fadd-standardized-support-information-to-your-node-js-modules%2F&amp;#038;title=Add%20standardized%20support%20information%20to%20your%20Node.js%20modules" data-a2a-url="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/" data-a2a-title="Add standardized support information to your Node.js modules"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/"&gt;Add standardized support information to your Node.js modules&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GKMeyeZuwcY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Nodeshift team recently improved the consistency of the projects we use to maintain our Node.js modules. We made sure that the same linter and tests—ESLint and Tape, for those interested—were used on all projects. We also added support information for the modules we publish to the npm registry. We looked to the Node.js Package [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/"&gt;Add standardized support information to your Node.js modules&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">853117</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2021-02-10T08:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules/</feedburner:origLink></entry><entry><title>How to activate your no-cost Red Hat Enterprise Linux subscription</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BAY1C9kw4cA/" /><category term="Linux" /><category term="Operating System" /><category term="download rhel" /><category term="No-cost RHEL" /><category term="RHEL" /><category term="RHEL subscription" /><author><name>Miroslav Suchý</name></author><id>https://developers.redhat.com/blog/?p=867017</id><updated>2021-02-10T08:00:23Z</updated><published>2021-02-10T08:00:23Z</published><content type="html">&lt;p&gt;A few weeks ago, we announced the new, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/new-year-new-red-hat-enterprise-linux-programs-easier-ways-access-rhel"&gt;no-cost Red Hat Enterprise Linux (RHEL) subscription&lt;/a&gt;. Here&amp;#8217;s a quick guide for developers who want to set up a subscription and start using it right away.&lt;/p&gt; &lt;h2&gt;Step 1: Make sure you have a Red Hat account&lt;/h2&gt; &lt;p&gt;Do you already have a Red Hat account? If not, you&amp;#8217;ll need to set one up. Navigate to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/"&gt;Red Hat Customer Portal&lt;/a&gt; and click on the account (person) icon in the upper-right corner, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_867037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1.png"&gt;&lt;img aria-describedby="caption-attachment-867037" class="wp-image-867037 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-1024x329.png" alt="The account icon is shown in the upper-right corner of the Red Hat Customer Portal." width="640" height="206" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-1024x329.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl1-768x247.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867037" class="wp-caption-text"&gt;Figure 1: Click the account icon in the upper-right corner.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You will get the options to log in or register, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_867047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2.png"&gt;&lt;img aria-describedby="caption-attachment-867047" class="wp-image-867047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-1024x344.png" alt="Users may log in or register for access to the Red Hat Customer Portal." width="640" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-1024x344.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-300x101.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl2-768x258.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867047" class="wp-caption-text"&gt;Figure 2: Log in or register for a new account.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you don&amp;#8217;t already have an account, click &lt;b&gt;Register&lt;/b&gt; and follow the instructions. You will be done with the registration within one minute.&lt;/p&gt; &lt;h2&gt;Step 2: Download no-cost RHEL&lt;/h2&gt; &lt;p&gt;Navigate to &lt;a href="https://developers.redhat.com/"&gt;Red Hat Developer&lt;/a&gt; and log in to your Red Hat account. Click the &lt;b&gt;Linux&lt;/b&gt; link at the top of the page, then &lt;b&gt;Download RHEL&lt;/b&gt;. Once you are on the &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;RHEL download page&lt;/a&gt;, you will see options to download an ISO image of RHEL, currently in version 8.3.0.&lt;/p&gt; &lt;p&gt;You can now use RHEL at no cost. Alternatively, you could set up an &lt;a target="_blank" rel="nofollow" href="https://dzone.com/articles/set-up-aws-ec2-instance-redhat-enterprise-linux-8"&gt;Amazon Web Services Elastic Compute Cloud (AWS EC2) RHEL instance&lt;/a&gt; or use it another way.&lt;/p&gt; &lt;h2&gt;Step 3: Register your RHEL subscription&lt;/h2&gt; &lt;p&gt;On your system with Red Hat Enterprise Linux installed, run&lt;/p&gt; &lt;pre&gt;subscription-manager register --username=admin --password=secret &lt;/pre&gt; &lt;p&gt;Your system can now consume all the content from Red Hat, including the latest security errata.&lt;/p&gt; &lt;h2&gt;About your no-cost RHEL subscription&lt;/h2&gt; &lt;p&gt;You can check the details of your no-cost RHEL subscription on the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/management"&gt;Red Hat Subscription Management page&lt;/a&gt;, which is shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_867067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3.png"&gt;&lt;img aria-describedby="caption-attachment-867067" class="wp-image-867067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-1024x334.png" alt="Screenshot of the Red Hat Subscription Management page." width="640" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-1024x334.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-300x98.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl3-768x251.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867067" class="wp-caption-text"&gt;Figure 3: Subscription details on the Red Hat Subscription Management page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;b&gt;Active Subscriptions&lt;/b&gt; followed by &lt;b&gt;Subscription Name&lt;/b&gt; and &lt;b&gt;Red Hat Developer Subscription&lt;/b&gt;. You will see the page in Figure 4, which describes your Red Hat Developer subscription.&lt;/p&gt; &lt;div id="attachment_867077" style="width: 502px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4.png"&gt;&lt;img aria-describedby="caption-attachment-867077" class="wp-image-867077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-492x1024.png" alt="Screenshot of the Red Hat Developer subscription details page." width="492" height="1024" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-492x1024.png 492w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-144x300.png 144w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/dl4-768x1599.png 768w" sizes="(max-width: 492px) 100vw, 492px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-867077" class="wp-caption-text"&gt;Figure 4: Red Hat Developer subscription details.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Registering for your no-cost RHEL subscription is a simple, three-step process. Once your subscription is active, you can use your Red Hat Enterprise Linux instance in various ways, including running it as an AWS EC2 RHEL instance.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#38;linkname=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F10%2Fhow-to-activate-your-no-cost-red-hat-enterprise-linux-subscription%2F&amp;#038;title=How%20to%20activate%20your%20no-cost%20Red%20Hat%20Enterprise%20Linux%20subscription" data-a2a-url="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/" data-a2a-title="How to activate your no-cost Red Hat Enterprise Linux subscription"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/"&gt;How to activate your no-cost Red Hat Enterprise Linux subscription&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BAY1C9kw4cA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A few weeks ago, we announced the new, no-cost Red Hat Enterprise Linux (RHEL) subscription. Here&amp;#8217;s a quick guide for developers who want to set up a subscription and start using it right away. Step 1: Make sure you have a Red Hat account Do you already have a Red Hat account? If not, you&amp;#8217;ll [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/"&gt;How to activate your no-cost Red Hat Enterprise Linux subscription&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">867017</post-id><dc:creator>Miroslav Suchý</dc:creator><dc:date>2021-02-10T08:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/10/how-to-activate-your-no-cost-red-hat-enterprise-linux-subscription/</feedburner:origLink></entry><entry><title type="html">Massive performance without headaches</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3licdpjx6-8/" /><author><name /></author><id>https://quarkus.io/blog/resteasy-reactive-faq/</id><updated>2021-02-10T00:00:00Z</updated><content type="html">The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it. Acknowledgement This blog post would not have been possible without the expert advice of Clement Escoffier and Stéphane Épardaud Imperative and Reactive: the elevator pitch In our...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3licdpjx6-8" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/resteasy-reactive-faq/</feedburner:origLink></entry><entry><title>Spring Boot on Quarkus: Magic or madness?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Rubsp5_qZac/" /><category term="Java" /><category term="Microservices" /><category term="Open source" /><category term="Quarkus" /><category term="Spring Boot" /><category term="Migration" /><category term="Quarkus migration" /><category term="Spring Boot migration" /><author><name>Eric Deandrea</name></author><id>https://developers.redhat.com/blog/?p=855487</id><updated>2021-02-09T08:00:58Z</updated><published>2021-02-09T08:00:58Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io"&gt;Quarkus&lt;/a&gt; is a &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; stack tailored for OpenJDK HotSpot (or OpenJ9 on zSeries) and GraalVM, crafted from optimized Java libraries and standards. It is a good choice for building highly-scalable applications while using lower amounts of CPU and memory resources than other Java frameworks. These applications can be traditional web applications, serverless applications, or even &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/funqy"&gt;functions as a service&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/tag/user-story/"&gt;many documented instances&lt;/a&gt; of organizations migrating their applications to Quarkus. In this article, let&amp;#8217;s see one such migration path from &lt;a target="_blank" rel="nofollow" href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; to Quarkus that is part magic and part madness! The magic will be some hand waving and performing the migration without changing a single line of code. The madness will be trying to figure out how it was done.&lt;/p&gt; &lt;h2&gt;The Application&lt;/h2&gt; &lt;p&gt;The application is a simple “to-do” task management system. The user can enter to-do items and then check them off once done. These items are stored in a &lt;a target="_blank" rel="nofollow" href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; database. All the application’s source code can be found &lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus"&gt;here&lt;/a&gt;. There’s a version that uses &lt;a target="_blank" rel="nofollow" href="https://gradle.org/"&gt;Gradle&lt;/a&gt; instead of &lt;a target="_blank" rel="nofollow" href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; as a build tool on the &lt;code&gt;gradle&lt;/code&gt; branch.&lt;/p&gt; &lt;h3&gt;Start the database&lt;/h3&gt; &lt;p&gt;The application requires a PostgreSQL database, so the first thing we will do is use Docker or &lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt; to start an instance locally:&lt;/p&gt; &lt;pre&gt;docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name tododb -e POSTGRES_USER=todo -e POSTGRES_PASSWORD=todo -e POSTGRES_DB=tododb -p 5432:5432 postgres:11.5 &lt;/pre&gt; &lt;p&gt;A PostgreSQL 11.5 instance on port 5432 should now be running. The &lt;code&gt;tododb&lt;/code&gt; schema accessible by the user &lt;code&gt;todo&lt;/code&gt; with the password &lt;code&gt;todo&lt;/code&gt; should be created.&lt;/p&gt; &lt;h3&gt;Run the application&lt;/h3&gt; &lt;p&gt;Run the application by issuing the command &lt;code&gt;./mvnw clean spring-boot:run&lt;/code&gt;. If you want to use Gradle instead of Maven, first switch to the &lt;code&gt;gradle&lt;/code&gt; branch (&lt;code&gt;git checkout gradle&lt;/code&gt;) and run the command &lt;code&gt;./gradlew clean bootRun&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You should see the standard Spring Boot banner:&lt;/p&gt; &lt;pre&gt; .   ____          _            __ _ _ /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) ) '  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::                (v2.4.1) INFO 68107 --- [  restartedMain] i.q.todospringquarkus.TodoApplication    : Started TodoApplication in 4.074 seconds (JVM running for 4.645) &lt;/pre&gt; &lt;p&gt;Take note of the startup time. We’ll revisit this in a bit.&lt;/p&gt; &lt;p&gt;Once the application is running, navigate to &lt;a target="_blank" rel="nofollow" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; in your favorite browser.  You should see the main application screen as shown here in Figure 1.&lt;/p&gt; &lt;div id="attachment_855717" style="width: 651px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-1.png"&gt;&lt;img aria-describedby="caption-attachment-855717" class="wp-image-855717" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-1.png" alt="The Spring Todos application with &amp;#34;My first todo&amp;#34; marked as complete." width="641" height="436" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-1.png 676w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-1-300x204.png 300w" sizes="(max-width: 641px) 100vw, 641px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-855717" class="wp-caption-text"&gt;Figure 1: Initial application screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Play around with the application a bit. Type a new todo into the text box and press Enter. That todo will show up in the list, as seen here in Figure 2.&lt;/p&gt; &lt;div id="attachment_855727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-2.png"&gt;&lt;img aria-describedby="caption-attachment-855727" class="wp-image-855727" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-2.png" alt="Spring Todos with the new todo added to the list." width="640" height="434" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-2.png 667w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/spring-todo-2-300x203.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-855727" class="wp-caption-text"&gt;Figure 2: Add a new todo.&lt;/p&gt;&lt;/div&gt; &lt;ol&gt; &lt;li&gt;Click the empty circle next to a todo to complete it, or uncheck it to mark it as incomplete.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;X&lt;/strong&gt; to remove a todo.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;OpenAPI&lt;/strong&gt; link at the bottom of the page will open the OpenAPI 3.0 specification for the application.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Swagger UI&lt;/strong&gt; link opens the embedded &lt;a target="_blank" rel="nofollow" href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt;, which can be used to execute some of the &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful endpoints&lt;/a&gt; directly.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Prometheus Metrics&lt;/strong&gt; link leads to the &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics-export-prometheus"&gt;Prometheus metrics endpoint&lt;/a&gt;, which would be scraped intermittently by &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Health Check&lt;/strong&gt; link opens the &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-health"&gt;built-in health check&lt;/a&gt; exposed by Spring Boot.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Go ahead and play around a bit to see it all in action. Don’t forget to come back here once you’re done! Use &lt;code&gt;CTRL-C&lt;/code&gt; on your keyboard to stop the application once you’re done.&lt;/p&gt; &lt;h3&gt;Examine the internals&lt;/h3&gt; &lt;p&gt;The application is a full-featured Spring Boot application using the following capabilities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html"&gt;Spring MVC&lt;/a&gt; for building a REST layer: &lt;ul&gt; &lt;li&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/java/io/quarkus/todospringquarkus/TodoController.java"&gt;src/main/java/io/quarkus/todospringquarkus/TodoController.java&lt;/a&gt;&lt;/code&gt; to find the Spring MVC RESTful controller, exposing the various endpoints available to the user interface.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html"&gt;Spring Data JPA&lt;/a&gt; for defining relational entities as well as storing and retrieving them: &lt;ul&gt; &lt;li&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/java/io/quarkus/todospringquarkus/TodoEntity.java"&gt;src/main/java/io/quarkus/todospringquarkus/TodoEntity.java&lt;/a&gt;&lt;/code&gt; to find the &lt;a target="_blank" rel="nofollow" href="https://www.oracle.com/java/technologies/persistence-jsp.html"&gt;Java Persistence API (JPA)&lt;/a&gt; entity, representing the relational table for storing the todos.&lt;/li&gt; &lt;li&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/java/io/quarkus/todospringquarkus/TodoRepository.java"&gt;src/main/java/io/quarkus/todospringquarkus/TodoRepository.java&lt;/a&gt; &lt;/code&gt;to find the &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories"&gt;Spring Data JPA Repository&lt;/a&gt;, exposing all of the create, read, update, and delete operations for the TodoEntity.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html"&gt;Spring Boot Actuators&lt;/a&gt; for providing operational capabilities, including health checks and metrics gathering.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://springdoc.org/"&gt;SpringDoc OpenAPI 3&lt;/a&gt; for generating and exposing RESTful API information as well as the embedded Swagger UI endpoint.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://micrometer.io/docs/registry/prometheus"&gt;Prometheus Micrometer Registry&lt;/a&gt; for exposing metrics to Prometheus.&lt;/li&gt; &lt;li&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/tree/main/src/main/resources/META-INF/resources"&gt;src/main/resources/META-INF/resources&lt;/a&gt;&lt;/code&gt; to find the user interface components used.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Configuration&lt;/h4&gt; &lt;p&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/resources/application.properties"&gt;src/main/resources/application.properties&lt;/a&gt;&lt;/code&gt; to find the application configuration:&lt;/p&gt; &lt;pre&gt;spring.jpa.hibernate.ddl-auto=create-drop spring.datasource.url=jdbc:postgresql://localhost:5432/tododb spring.datasource.username=todo spring.datasource.password=todo springdoc.api-docs.path=/openapi springdoc.swagger-ui.path=/swagger-ui management.endpoints.web.exposure.include=prometheus,health &lt;/pre&gt; &lt;p&gt;Open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/resources/import.sql"&gt;src/main/resources/import.sql&lt;/a&gt;&lt;/code&gt; to find some SQL that will pre-populate the database table with an initial set of data:&lt;/p&gt; &lt;pre&gt;INSERT INTO todo(id, title, completed) VALUES (0, 'My first todo', 'true'); &lt;/pre&gt; &lt;p&gt;That’s it Not a lot of code here for a fully-functional application that’s a whole lot more than “Hello World!”&lt;/p&gt; &lt;h2&gt;The Magic&lt;/h2&gt; &lt;p&gt;One hard requirement for this migration has been chosen: The application’s source code cannot be modified in any way.&lt;/p&gt; &lt;p&gt;Are you ready for the magic trick? Return to the command line and run the command &lt;code&gt;./.mvnw clean spring-boot:run&lt;/code&gt;. If you want to use Gradle instead of Maven, first switch to the &lt;code&gt;gradle&lt;/code&gt; branch (&lt;code&gt;git checkout gradle&lt;/code&gt;) and run the command &lt;code&gt;./.gradlew clean bootRun&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The first thing you’ll notice is the Quarkus banner and startup messaging instead of the Spring Boot one:&lt;/p&gt; &lt;pre&gt;__  ____  __  _____   ___  __ ____  ______ --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ -/ /_/ / /_/ / __ |/ , _/ ,&amp;#60; / /_/ /\ \ --\___\_\____/_/ |_/_/|_/_/|_|\____/___/ INFO  [io.quarkus] (Quarkus Main Thread) todo-spring-quarkus 1.0.0-SNAPSHOT on JVM (powered by Quarkus 1.10.5.Final) started in 2.743s. Listening on: http://localhost:8080 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated. INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, jdbc-postgresql, kubernetes, micrometer, mutiny, narayana-jta, resteasy, resteasy-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, spring-boot-properties, spring-data-jpa, spring-di, spring-web, swagger-ui] &lt;/pre&gt; &lt;p&gt;Wait, what just happened? The application is now a Quarkus application and no longer a Spring Boot application? That’s madness!&lt;/p&gt; &lt;p&gt;Want proof? Go back to your browser window (&lt;a target="_blank" rel="nofollow" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; in case you closed it) and reload the page. The same user interface is there and is completely functional. Click on all the various links at the bottom of the page. They’re all completely functional as they were before.&lt;/p&gt; &lt;p&gt;Also, note the startup time. The Quarkus version starts up in almost half the amount of time given the exact same codebase (4.074s for Spring vs. 2.743s for Quarkus in the shown examples). That&amp;#8217;s Supersonic, Subatomic, Java!&lt;/p&gt; &lt;p&gt;Nothing changed, so how did all this happen? A good magician doesn’t reveal his or her secrets!&lt;/p&gt; &lt;h2&gt;The Madness&lt;/h2&gt; &lt;p&gt;All good magicians use &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Sleight_of_hand"&gt;sleight-of-hand&lt;/a&gt; to distract his or her audience when performing a trick. There are a few things that weren’t shown yet in this post that are hidden from the naked eye. Did you notice anything suspicious? Let’s take a closer look at how the trick was done.&lt;/p&gt; &lt;h3&gt;Execution&lt;/h3&gt; &lt;p&gt;Look very closely at the commands you used to run the application:&lt;/p&gt; &lt;p&gt;Using Maven:&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;Spring Boot: &lt;code&gt;./mvnw clean spring-boot:run&lt;/code&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;Quarkus: &lt;code&gt;./.mvnw clean spring-boot:run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Using Gradle:&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;Spring Boot: &lt;code&gt;./gradlew clean bootRun&lt;/code&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;Quarkus: &lt;code&gt;./.gradlew clean bootRun&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Notice any differences? A different executable (&lt;code&gt;.mvnw&lt;/code&gt;/&lt;code&gt;.gradlew&lt;/code&gt;) is used in the Quarkus version. If you open those files and examine them closely, you’ll notice some trickery going on:&lt;/p&gt; &lt;p&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/.mvnw"&gt;.mvnw&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;#!/bin/sh ./mvnw clean quarkus:dev -Pquarkus &lt;/pre&gt; &lt;p&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/.gradlew"&gt;.gradlew&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;#!/bin/sh ./gradlew -Pprofile=quarkus $@ &lt;/pre&gt; &lt;p&gt;We used some sleight-of-hand to disguise the actual commands used to start the application. More on Gradle and Maven profiles later.&lt;/p&gt; &lt;h3&gt;Configuration&lt;/h3&gt; &lt;p&gt;Are you saying that Quarkus knows how to read and understand the Spring Boot configuration inside &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;? Well, no. Remember, this is a magic trick. A magician never tells the complete truth. What wasn’t shown in the example above is the Quarkus-specific configuration. It was hidden further down in the file.&lt;/p&gt; &lt;p&gt;If you re-open &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/resources/application.properties"&gt;src/main/resources/application.properties&lt;/a&gt;&lt;/code&gt; and scroll all the way to the bottom (around line 58) you’ll see some additional configuration:&lt;/p&gt; &lt;pre&gt;quarkus.datasource.db-kind=postgresql quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/tododb quarkus.datasource.username=todo quarkus.datasource.password=todo quarkus.datasource.metrics.enabled=true quarkus.hibernate-orm.database.generation=drop-and-create quarkus.hibernate-orm.sql-load-script=import.sql quarkus.micrometer.export.prometheus.path=/actuator/prometheus quarkus.smallrye-health.root-path=/actuator/health &lt;/pre&gt; &lt;p&gt;This configuration is similar to the Spring Boot configuration at the top of the file. One thing it does do, however, is to re-define the paths for the Prometheus and the health probe endpoints, so they match the paths of the Spring Boot actuator endpoints. This allows the &lt;strong&gt;Prometheus Metrics&lt;/strong&gt; and &lt;strong&gt;Health Check&lt;/strong&gt; links at the bottom of the screen to work without any changes to the user interface.&lt;/p&gt; &lt;p&gt;Pretty sneaky, huh?&lt;/p&gt; &lt;h3&gt;Dependencies&lt;/h3&gt; &lt;p&gt;As you can imagine, there are lots of dependencies that need to be changed, added, or updated. Luckily, Quarkus provides many Spring compatibility extensions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-di"&gt;Quarkus extension for Spring Dependency Injection&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-web"&gt;Quarkus extension for Spring Web&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-data-jpa"&gt;Quarkus extension for Spring Data JPA&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-boot-properties"&gt;Quarkus extension for Spring Boot Properties&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Simply swapping some of the Spring Boot dependencies for the Quarkus ones will go a long way. There are a few other capabilities, such as Prometheus metrics, OpenAPI documentation, Swagger UI integration, and health checks that need other dependencies added. Lucky for us again, Quarkus has these capabilities as well:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/openapi-swaggerui"&gt;Quarkus extension for OpenAPI and Swagger UI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/microprofile-health"&gt;Quarkus extension for MicroProfile Health&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/micrometer"&gt;Quarkus extension for Micrometer Metrics&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now you’re probably thinking to yourself, “But I didn’t make ANY changes whatsoever. All I did was run a Maven or Gradle command, and the entire application ran as a Quarkus application instead of a Spring Boot application. How can that be?”&lt;/p&gt; &lt;h3&gt;Build setup&lt;/h3&gt; &lt;p&gt;The build file is where all the magic happens. The build tool you are using determines how the dependency resolution magic actually happens, though.&lt;/p&gt; &lt;h4&gt;Maven&lt;/h4&gt; &lt;p&gt;On the &lt;code&gt;main&lt;/code&gt; branch, open the &lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/pom.xml"&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt; file. You’ll immediately notice the build file is broken into multiple &lt;a target="_blank" rel="nofollow" href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html"&gt;Maven profiles&lt;/a&gt;, &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/pom.xml#L26-L99"&gt;spring&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/pom.xml#L100-L195"&gt;quarkus&lt;/a&gt;&lt;/code&gt;, with the &lt;code&gt;spring&lt;/code&gt; profile being the default profile. These profiles define which dependencies and build plugins are included when you run either &lt;code&gt;./mvnw clean spring-boot:run&lt;/code&gt; or &lt;code&gt;./mvnw -Pquarkus clean quarkus:dev&lt;/code&gt; (which is disguised using some redirection in the aforementioned &lt;code&gt;.mvnw&lt;/code&gt; script).&lt;/p&gt; &lt;h4&gt;Gradle&lt;/h4&gt; &lt;p&gt;Gradle, on the other hand, does not have the concept of a profile. You’ll notice a handful of &lt;code&gt;.gradle&lt;/code&gt; files in the &lt;code&gt;gradle&lt;/code&gt; branch of the project:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/build-common.gradle"&gt;build-common.gradle&lt;/a&gt;&lt;/code&gt; &lt;ul&gt; &lt;li&gt;Contains any common build logic applicable to both versions of the application, including setting the groupId/version of the produced artifact as well as artifact repository definitions.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/build-spring.gradle"&gt;build-spring.gradle&lt;/a&gt;&lt;/code&gt; &lt;ul&gt; &lt;li&gt;Contains all build logic, plugins, and dependencies specific to the Spring version of the application.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/build-quarkus.gradle"&gt;build-quarkus.gradle&lt;/a&gt;&lt;/code&gt; &lt;ul&gt; &lt;li&gt;Contains all build logic, plugins, and dependencies specific to the Quarkus version of the application. &lt;code&gt;build-quarkus.gradle&lt;/code&gt; even introduces &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#running-your-application"&gt;Spring Boot’s &lt;code&gt;bootRun&lt;/code&gt;&lt;/a&gt; task, re-mapping it to the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/gradle-tooling#development-mode"&gt;quarkusDev&lt;/a&gt;&lt;/code&gt; task from the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/gradle-tooling"&gt;Quarkus Gradle plugin.&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/settings.gradle"&gt;settings.gradle&lt;/a&gt;&lt;/code&gt; &lt;ul&gt; &lt;li&gt;Where the magic actually happens! The &lt;code&gt;settings.gradle&lt;/code&gt; file looks for a &lt;a target="_blank" rel="nofollow" href="https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties"&gt;Gradle project property&lt;/a&gt; called &lt;code&gt;profile&lt;/code&gt;: &lt;ul&gt; &lt;li&gt;If this property isn’t found, it defaults the value to &lt;code&gt;spring&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;It then sets the project’s build file, either &lt;code&gt;build-spring.gradle&lt;/code&gt; or &lt;code&gt;build-quarkus.gradle&lt;/code&gt;, as the main build file to use.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In general, this is a pretty good pattern to use if you need Gradle to simulate the capabilities of Maven profiles.&lt;/p&gt; &lt;h3&gt;Application Main Class&lt;/h3&gt; &lt;p&gt;It was mentioned at the beginning of this post that we wanted to perform the migration without changing a single line of code. Every Spring Boot application needs to have an “application” class that contains a &lt;code&gt;main&lt;/code&gt; method and is annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt;. In our project, &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/src/main/java/io/quarkus/todospringquarkus/TodoApplication.java"&gt;src/main/java/io/quarkus/todospringquarkus/TodoApplication.java&lt;/a&gt;&lt;/code&gt; is that class.&lt;/p&gt; &lt;p&gt;Quarkus does not require such a class, nor do any of the Quarkus Spring compatibility extensions provide resolution for the &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation nor the &lt;code&gt;SpringApplication&lt;/code&gt; class referenced in this class.&lt;/p&gt; &lt;p&gt;So, what gives? We didn’t make any code changes whatsoever, yet those classes seem to resolve just fine in Quarkus.&lt;/p&gt; &lt;p&gt;You’ll notice a peculiar comment in both &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/main/pom.xml#L16"&gt;pom.xml&lt;/a&gt;&lt;/code&gt; (for Maven)/&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/edeandrea/todo-spring-quarkus/blob/gradle/build-quarkus.gradle#L23"&gt;build-quarkus.gradle&lt;/a&gt;&lt;/code&gt; (for Gradle), right above the dependency declaration for the dependency &lt;code&gt;org.springframework.boot:spring-boot-autoconfigure&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;This dependency is a hack for TodoApplication.java, which isn't required for Quarkus. Point of demo is to NOT have any code changes. &lt;/pre&gt; &lt;p&gt;This is the key to this part of the trick. This dependency allows both Spring Boot and Quarkus to resolve these classes at build time. The dependency is declared &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies"&gt;optional&lt;/a&gt;&lt;/code&gt; in Maven/&lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://blog.gradle.org/introducing-compile-only-dependencies"&gt;compileOnly&lt;/a&gt;&lt;/code&gt; in Gradle, meaning it will never be included in the application binary the Quarkus build produces. It will be included in the binary the Spring Boot build produces because all of the other &lt;code&gt;spring-boot-starter-*&lt;/code&gt; dependencies also depend on it, so it&amp;#8217;s included transitively.&lt;/p&gt; &lt;h2&gt;Wrap Up&lt;/h2&gt; &lt;p&gt;You saw in this post how to take an existing Spring Boot application and run it on Quarkus without making a single change to the code. Was the method magic or madness? Maybe a little bit of both? It&amp;#8217;s up to you to decide for yourself.&lt;/p&gt; &lt;p&gt;This post showed one way to migrate an application that is more than “Hello World” from Spring Boot to Quarkus with a hard requirement of not changing a single line of source code. It isn’t at all intended to represent the only potential migration path. Furthermore, there may be times when an application uses some library or API where there isn’t a Quarkus equivalent. In those cases, there may be code changes or some refactoring necessary.&lt;/p&gt; &lt;p&gt;A big thanks to &lt;a href="https://developers.redhat.com/authors/eric-murphy"&gt;Eric Murphy&lt;/a&gt;. He is the original author of the application and came up with the magic trick idea.&lt;/p&gt; &lt;h2&gt;References&lt;/h2&gt; &lt;p&gt;All source code for this post can be found &lt;a target="_blank" rel="nofollow" href="http://github.com/edeandrea/todo-spring-quarkus"&gt;here&lt;/a&gt;. The &lt;code&gt;main&lt;/code&gt; branch contains the Maven version, and the &lt;code&gt;gradle&lt;/code&gt; branch contains the Gradle version. The application source code is the same on both branches.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#38;linkname=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F09%2Fspring-boot-on-quarkus-magic-or-madness%2F&amp;#038;title=Spring%20Boot%20on%20Quarkus%3A%20Magic%20or%20madness%3F" data-a2a-url="https://developers.redhat.com/blog/2021/02/09/spring-boot-on-quarkus-magic-or-madness/" data-a2a-title="Spring Boot on Quarkus: Magic or madness?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/09/spring-boot-on-quarkus-magic-or-madness/"&gt;Spring Boot on Quarkus: Magic or madness?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Rubsp5_qZac" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Quarkus is a Java stack tailored for OpenJDK HotSpot (or OpenJ9 on zSeries) and GraalVM, crafted from optimized Java libraries and standards. It is a good choice for building highly-scalable applications while using lower amounts of CPU and memory resources than other Java frameworks. These applications can be traditional web applications, serverless applications, or even [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/09/spring-boot-on-quarkus-magic-or-madness/"&gt;Spring Boot on Quarkus: Magic or madness?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/09/spring-boot-on-quarkus-magic-or-madness/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">855487</post-id><dc:creator>Eric Deandrea</dc:creator><dc:date>2021-02-09T08:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/09/spring-boot-on-quarkus-magic-or-madness/</feedburner:origLink></entry><entry><title type="html">Kogito Tooling 0.8.3 Released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wyBAxFe0uvs/kogito-tooling-0-8-3-released.html" /><author><name>Eder Ignatowicz</name></author><id>https://blog.kie.org/2021/02/kogito-tooling-0-8-3-released.html</id><updated>2021-02-09T05:00:00Z</updated><content type="html">We have just launched a fresh new Kogito Tooling release! &#x1f389; On the 0.8.3 , we made a lot of improvements and bug fixes. This post will give a quick overview of this release, and also add some highlights of our and releases. I hope you enjoy it! BPMN AND DMN STANDALONE EDITORS Since 0.7.2.alpha3 we started a new component of the KIE tooling, our standalone BPMN and DMN Editors. On the 0.8.1 release, we delivered the first official version of this cool library. &#x1f389; These Standalone Editors provide a straightforward way to use our tried-and-true DMN and BPMN Editors embedded in your web applications. The editors are now distributed in a self-contained library that provides an all-in-one JavaScript file for each of them that can be interacted with using a comprehensive API for setup and control it. Now it’s super easy to embed our editors in your applications, see this gist example: View the code on . That will render: EMBED YOUR BPMN AND DMN MODELS In the 0.8.2 release, we have introduced a new feature that will enable you easily embed your BPMN and DMN models on any web application with an iframe. We have updated our toolbar on the Business Modeler Preview, and now under the “Share” menu, there is an “Embed” option. See the full for an in-depth look into this feature. DMN EDITOR NOW OPENS 1.1 AND 1.3 ASSETS The DMN editor continues evolving towards making users’ lives as simple as possible. On Kogito 0.8.1, we introduce a new mechanism to open DMN 1.1 and 1.3 assets. NEW FEATURES, FIXED ISSUES, AND IMPROVEMENTS We also made some new features, a lot of refactorings and improvements, with highlights to: INFRASTRUCTURE * [] – Importing DMN as Included Model in VS Code on Windows * [] – [Chrome Extension] “Copy link to Online editor” button doesn’t work on private repositories * [] – [Chrome Extension] The “Go to Home page” link doesn’t work * [] – Standalone editors (Milestone 1) * [] – Export the Online Editor content using the Standalone Editor * [] – Discuss and plan productization embedded DMN and BPMN editors * [] – [VSCode] Undo/redo command don’t fire for webviews if used from command palette * [] – Recent saved file is not being show in Recents list * [] – Fix Keyboard Shortcuts modal title on VS Code dark theme * [] – Save SVG file using the kieserver naming convention * [] – Fix Open SVG popup to not open SVG when clicking the X button EDITORS * [] – [Test Scenario Editor] Improve Test Scenario creation UX * [] – Allow to select any DMN asset in Wizard * [] – Cannot open Violation Scenarios.scesim in VScode * [] – [DMN Designer] DMN 1.1 model can not be fixed to proper DMN 1.2 * [] – Stunner – Cannot undo/redo more than once * [] – [DMN Designer] Move the “structure” option to top of the Data Type drop-down * [] – [DMN Designer] Rename “Dismiss” to “Skip tour” * [] – DefaultXmlFormatter: Should return plain text if formatting fails * [] – [DMN editor] User cannot open DMN editor if it was previously saved in workspace * [] – DMN editor when moving DS output decision becomes encapsulated * [] – DMN Editor decision service wrong layout * []] – [DMN Designer] VS Code Included models self reference * [] – [DMN Designer] Copied value is pasted twice * [] – DMN decision table “Unable to resolve type reference ‘UNDEFINED’” in simple data types * [] – Error when adding constraints to a data type * [] – [DMN Designer] ‘continue’ vs ‘Continue’ * [] – [DMN Designer] Show parameters list for Decision Services * [] – [DMN Designer] Convert DMN 1.1/1.3 models to version 1.2 * [] – [Test Scenario Editor] Changes on Setting Docks must activate isDirty status * [] – DMN Editor regression failing display edge when xml missing DMNDI FURTHER READING/WATCHING We had recently some cool talks at KIE youtube channel: * DMN: squeeze the most out of these features, by Matteo; * Kogito + Quarkus: the Marriage Made on a Cloud, by Edoardo; * OptaPlanner Shadow Variables for the Vehicle Routing Problem and Task Assignment, by Geoffrey; I would like to also recommend the recent from Yeser, where he provides a complete step-by-step tutorial to import and process a PMML model inside the DMN Editor in VSCode. THANK YOU TO EVERYONE INVOLVED! I would like to thank everyone involved with this release, from the excellent KIE Tooling Engineers to the lifesavers QEs and the UX people that help us look awesome! The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wyBAxFe0uvs" height="1" width="1" alt=""/&gt;</content><dc:creator>Eder Ignatowicz</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/kogito-tooling-0-8-3-released.html</feedburner:origLink></entry></feed>
